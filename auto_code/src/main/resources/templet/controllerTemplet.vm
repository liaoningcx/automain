package $!{packagePath}.controller;

import com.auto.common.CommonResponse;
import com.auto.common.Page;

import $!{packagePath}.service.$!{tableClassNameFirstCap}Service;
import $!{packagePath}.domain. $!{tableClassNameFirstCap};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * $!{tableAnnontation}的Controller实现
 * User: $!{authorName}
 * DateTime: $!{projMakeTime}
 **/
@Controller
@RequestMapping("/$!{tableClassName}")
public class $!{tableClassNameFirstCap}Controller {

    @Autowired
    private $!{tableClassNameFirstCap}Service $!{tableClassName}Service;

    @RequestMapping(value = "/", method = RequestMethod.GET)
    public String main(Model model, HttpServletResponse response) {
        model.addAttribute("testAttr", "测试属性");
        return "index";
    }

    @RequestMapping(value = "/$!{tableClassName}View", method = RequestMethod.GET)
    public String $!{tableClassName}View(Model model, HttpServletResponse response) {
        return "$!{tableClassName}View";
    }

    /**
    * 查询所有$!{tableAnnontation}
    * @param model
    * @param response
    * @return $!{tableAnnontation}结果
    */
    @ResponseBody
    @RequestMapping(value = "/query$!{tableClassNameFirstCap}", method = {RequestMethod.GET,RequestMethod.POST})
    public CommonResponse query$!{tableClassNameFirstCap}(Model model, HttpServletResponse response) {
        CommonResponse<List<$!{tableClassNameFirstCap}>> commonResponse = new CommonResponse<List<$!{tableClassNameFirstCap}>>();
        try {
            $!{tableClassNameFirstCap} query = new $!{tableClassNameFirstCap}();
            List<$!{tableClassNameFirstCap}> $!{tableClassName}List = $!{tableClassName}Service.select(query);
            commonResponse.setData($!{tableClassName}List);
        }catch (Exception ex){
            ex.printStackTrace();
        }
        return commonResponse;
    }

    /**
    * 分页查询$!{tableAnnontation}
    * @param model
    * @param response
    * @return $!{tableAnnontation}结果
    */
    @ResponseBody
    @RequestMapping(value = "/find$!{tableClassNameFirstCap}", method = {RequestMethod.GET,RequestMethod.POST})
    public CommonResponse find$!{tableClassNameFirstCap}(Model model, HttpServletResponse response) {
        CommonResponse<Page<$!{tableClassNameFirstCap}>> commonResponse = new CommonResponse<Page<$!{tableClassNameFirstCap}>>();
        try {
            $!{tableClassNameFirstCap} query = new $!{tableClassNameFirstCap}();
            Page<$!{tableClassNameFirstCap}> $!{tableClassName}Page = $!{tableClassName}Service.find$!{tableClassNameFirstCap}Page(query);
            commonResponse.setData($!{tableClassName}Page);
        }catch (Exception ex){
            ex.printStackTrace();
        }
        return commonResponse;
    }

    /**
    * 删除$!{tableAnnontation}
    * @param request
    * @return
    */
    @ResponseBody
    @RequestMapping(value = "/del$!{tableClassNameFirstCap}", method = {RequestMethod.GET,RequestMethod.POST})
    public CommonResponse del$!{tableClassNameFirstCap}(HttpServletRequest request) {
        CommonResponse<$!{tableClassNameFirstCap}> commonResponse = new CommonResponse<$!{tableClassNameFirstCap}>();
        try {
            $!{tableClassNameFirstCap} $!{tableClassName} = new $!{tableClassNameFirstCap}();
            $!{tableClassName}.set$!{pkColumn.columnClassNameFirstCap}(Integer.valueOf(request.getParameter("$!{pkColumn.columnClassName}")));
            $!{tableClassName}Service.deleteByID($!{tableClassName});
            commonResponse.setCode(CommonResponse.CODE_OK);
            commonResponse.setMessage(CommonResponse.MESSAGE_OK);
        }catch (Exception ex){
            commonResponse.setCode(CommonResponse.CODE_FAILED);
            commonResponse.setMessage(CommonResponse.MESSAGE_FAILED);
            ex.printStackTrace();
        }
        return commonResponse;
    }

    /**
    * 显示添加$!{tableAnnontation}页面
    * @param model
    * @param response
    * @return
    */
    @RequestMapping(value = "/showIns$!{tableClassNameFirstCap}View", method = {RequestMethod.GET,RequestMethod.POST})
    public String showIns$!{tableClassNameFirstCap}View(Model model, HttpServletResponse response) {
        return "$!{tableClassName}ViewIns";
    }

    /**
    * 添加$!{tableAnnontation}
    * @param request
    * @return
    */
    @ResponseBody
    @RequestMapping(value = "/insert$!{tableClassNameFirstCap}", method = {RequestMethod.GET,RequestMethod.POST})
    public CommonResponse insert$!{tableClassNameFirstCap}(HttpServletRequest request) {
        CommonResponse commonResponse = new CommonResponse();
        $!{tableClassNameFirstCap} $!{tableClassName} = new $!{tableClassNameFirstCap}();
        try {
#foreach(${basicColumn} in ${basicColumnList})
            $!{tableClassName}.set$!{basicColumn.columnClassNameFirstCap}(request.getParameter("$!{tableClassName}[$!{basicColumn.columnClassName}]"));
#end
            $!{tableClassName}Service.insert($!{tableClassName});
            commonResponse.setCode(CommonResponse.CODE_OK);
            commonResponse.setMessage(CommonResponse.MESSAGE_OK);
        } catch (Exception e) {
            commonResponse.setCode(CommonResponse.CODE_EXCEPTION);
            commonResponse.setMessage(CommonResponse.MESSAGE_EXCEPTION);
            e.printStackTrace();
        }
        return commonResponse;
    }

    /**
    * 显示修改$!{tableAnnontation}页面
    * @param model
    * @param response
    * @param id
    * @return
    */
    @RequestMapping(value = "/showMod$!{tableClassNameFirstCap}View", method = {RequestMethod.GET,RequestMethod.POST})
    public String mod$!{tableClassNameFirstCap}(Model model, HttpServletResponse response,Integer id) {
        $!{tableClassNameFirstCap} $!{tableClassName} = new $!{tableClassNameFirstCap}();
        $!{tableClassName}.set$!{pkColumn.columnClassNameFirstCap}(id);
        try {
            List<$!{tableClassNameFirstCap}> $!{tableClassName}List = $!{tableClassName}Service.select($!{tableClassName});
            if($!{tableClassName}List!=null&&$!{tableClassName}List.size()>0){
                $!{tableClassName} = $!{tableClassName}List.get(0);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        model.addAttribute("$!{tableClassName}",$!{tableClassName});
        return "$!{tableClassName}ViewMod";
    }

    /**
    * 修改$!{tableAnnontation}
    * @param request
    * @return
    */
    @ResponseBody
    @RequestMapping(value = "/modify$!{tableClassNameFirstCap}", method = {RequestMethod.GET,RequestMethod.POST})
    public CommonResponse modify$!{tableClassNameFirstCap}(HttpServletRequest request) {
        CommonResponse commonResponse = new CommonResponse();
        $!{tableClassNameFirstCap} $!{tableClassName} = new $!{tableClassNameFirstCap}();
        try {
            $!{tableClassName}.set$!{pkColumn.columnClassNameFirstCap}(Integer.valueOf(request.getParameter("$!{pkColumn.columnClassName}")));
        #foreach(${basicColumn} in ${basicColumnList})
            $!{tableClassName}.set$!{basicColumn.columnClassNameFirstCap}(request.getParameter("$!{tableClassName}[$!{basicColumn.columnClassName}]"));
        #end
            $!{tableClassName}Service.updateByID($!{tableClassName});
            commonResponse.setCode(CommonResponse.CODE_OK);
            commonResponse.setMessage(CommonResponse.MESSAGE_OK);
        } catch (Exception e) {
            commonResponse.setCode(CommonResponse.CODE_EXCEPTION);
            commonResponse.setMessage(CommonResponse.MESSAGE_EXCEPTION);
            e.printStackTrace();
        }
        return commonResponse;
    }

}